{
	// Place your conemp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
  "Generar un servicio": {
    "prefix": "crearServicio",
    "body": [
      "const bd = require('./basedatos.servicio');",
      "",
      "class $1Servicio {",
      "  campos = \"\";",
      "  tabla = '$2';",
      "  constructor(){",
      "  }",
      "",
      "  async crear(datos){",
      "    try{",
      "      const resultado = await bd.insertar(tabla, datos);",
      "      if(resultado.idInsertado) return resultado.idInsertado;",
      "      return 0;",
      "    }catch(error){",
      "      throw new Error(`500-${error}`);",
      "    }",
      "  }",
      "",
      "  async buscar(filtro, inicio = 1, limite = 50){",
      "    try{",
      "      const resultado = await bd.buscar(tabla, campos, filtro, inicio, limite);",
      "      if(resultado.length) return resultado;",
      "      return [];",
      "    }catch(error){",
      "      throw new Error(`500-${error}`);",
      "    }",
      "  }",
      "",
      "  async buscarUno(filtro){",
      "    try{",
      "      const resultado = await bd.buscar(tabla, campos, filtro, 1, 1);",
      "      if(resultado.length) return resultado;",
      "      return [];",
      "    }catch(error){",
      "      throw new Error(`500-${error}`);",
      "    }",
      "  }",
      "",
      "  async actualizar(datos, filtros, limite = 1){",
      "    try{",
      "      const resultado = await bd.actualizar(tabla, datos, filtros, limite);",
      "      if(resultado.filasActualizadas) return resultado.filasActualizadas;",
      "      return 0;",
      "    }catch(error){",
      "      throw new Error(`500-${error}`);",
      "    }",
      "  }",
      "",
      "  async eliminar(filtros, limite = 1){",
      "    try{",
      "      const resultado = await bd.eliminar(tabla, filtros, limite);",
      "      if(resultado.filasEliminadas) return resultado.filasEliminadas;",
      "      return 0;",
      "    }catch(error){",
      "      throw new Error(`500-${error}`);",
      "    }",
      "  }",
      "}",
      "",
      "module.exports = $1Servicio;",
      ""
    ],
    "description": "Generar un servicio"
  }
}
